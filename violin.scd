/*
* TODO:
1. modulate overall partial amps (g3_p_amps and b3_p_amps) proportionally with amp parameter (louder amp => more weighting of higher partials)
2. think about vibrato settings, varying with total duration
3. add comments to audio_analysis.py
4. blog post
*/

(
// getEnv returns the amplitude envelope for the given partial with a specified duration
// values were obtained using the get_envs function in audio_analysis.py
// essentially, they are the smoothed spectrogram of the string_vln.g3.wav file, indexed by each partial's frequency
~getEnv = {|partial=0, duration=1.0|
	    // this array obtained from audio_analysis.py
	    // it consists of 30 (1 per partial) arrays of smoothed amplitude over time
		var g3_envs = [[0.13883, 0.17909, 0.22483, 0.27429, 0.32814, 0.38232, 0.43515, 0.48572, 0.5338, 0.57657, 0.61333, 0.64355, 0.66733, 0.68449, 0.69461, 0.69834, 0.69738, 0.69248, 0.68369, 0.67426, 0.66441, 0.65551, 0.647, 0.64096, 0.63664, 0.63523, 0.63652, 0.64339, 0.65411, 0.66823, 0.6855, 0.70873, 0.73625, 0.76657, 0.80036, 0.83658, 0.87395, 0.90925, 0.94174, 0.96977, 0.98961, 1.0, 0.99965, 0.98766, 0.96341, 0.92559, 0.87639, 0.81736, 0.74931, 0.67529, 0.59912, 0.52283, 0.44842, 0.37737, 0.31252, 0.2554, 0.20481, 0.16157, 0.12569, 0.09743, 0.07436, 0.05609, 0.04249, ], [0.13295, 0.17183, 0.216, 0.26406, 0.315, 0.36688, 0.41799, 0.46701, 0.5126, 0.55357, 0.58844, 0.61676, 0.63842, 0.65308, 0.66092, 0.66265, 0.65888, 0.65164, 0.64131, 0.62966, 0.61756, 0.60682, 0.59696, 0.58863, 0.58288, 0.58122, 0.58322, 0.58974, 0.60014, 0.61517, 0.63494, 0.65961, 0.68927, 0.72411, 0.76274, 0.8044, 0.84715, 0.88883, 0.92776, 0.96132, 0.98591, 0.99925, 1.0, 0.98655, 0.95822, 0.9149, 0.85719, 0.78671, 0.70691, 0.62089, 0.53283, 0.44528, 0.3617, 0.28489, 0.21704, 0.15867, 0.11092, 0.0735, 0.04562, 0.02639, 0.01362, 0.00588, 0.00226, ], [0.38685, 0.46563, 0.54598, 0.62441, 0.7001, 0.76776, 0.82517, 0.87429, 0.91221, 0.93553, 0.94716, 0.94547, 0.93301, 0.90677, 0.87608, 0.8403, 0.80019, 0.76175, 0.72053, 0.68833, 0.65841, 0.64039, 0.62704, 0.62275, 0.62587, 0.64099, 0.66093, 0.69041, 0.72319, 0.75693, 0.7923, 0.83231, 0.86865, 0.90551, 0.93548, 0.96403, 0.98505, 0.99676, 1.0, 0.99402, 0.98306, 0.95474, 0.91718, 0.86773, 0.81032, 0.74225, 0.66899, 0.58853, 0.50844, 0.42801, 0.35336, 0.28367, 0.22127, 0.1655, 0.12049, 0.08289, 0.05579, 0.03369, 0.02089, 0.01472, 0.01004, 0.0066, 0.00125, ], [0.18219, 0.23836, 0.30276, 0.37435, 0.45142, 0.5312, 0.611, 0.68991, 0.76405, 0.83059, 0.88793, 0.9341, 0.96884, 0.99159, 1.0, 0.99644, 0.982, 0.95852, 0.92747, 0.89257, 0.8544, 0.81693, 0.78118, 0.74736, 0.71743, 0.69261, 0.67427, 0.66299, 0.65815, 0.65768, 0.66267, 0.67406, 0.68848, 0.70574, 0.72366, 0.74352, 0.76324, 0.77975, 0.79139, 0.797, 0.79513, 0.78396, 0.76406, 0.73445, 0.69548, 0.64747, 0.59233, 0.53129, 0.46597, 0.3992, 0.33381, 0.27208, 0.2156, 0.16451, 0.12161, 0.08631, 0.0586, 0.03609, 0.0206, 0.01074, 0.00482, 0.00155, 0.0006, ], [0.13303, 0.17028, 0.21265, 0.25747, 0.30353, 0.34928, 0.39359, 0.43485, 0.47184, 0.50382, 0.53016, 0.55056, 0.56534, 0.57447, 0.57855, 0.5787, 0.57659, 0.57385, 0.57137, 0.57066, 0.57188, 0.57726, 0.58421, 0.59296, 0.60326, 0.61748, 0.63335, 0.65064, 0.66771, 0.68614, 0.70553, 0.72593, 0.74857, 0.77645, 0.80469, 0.83738, 0.87309, 0.9075, 0.94019, 0.96827, 0.98858, 1.0, 0.99955, 0.98473, 0.95484, 0.90916, 0.84831, 0.77347, 0.68915, 0.59862, 0.5067, 0.41599, 0.33084, 0.25408, 0.18708, 0.12936, 0.08587, 0.05164, 0.02673, 0.0123, 0.0038, 0.00067, 0.00025, ], [0.14318, 0.18053, 0.22182, 0.26465, 0.30672, 0.34725, 0.38612, 0.42032, 0.45098, 0.47668, 0.4962, 0.51116, 0.52016, 0.5232, 0.52151, 0.51698, 0.51097, 0.50587, 0.50164, 0.49478, 0.48991, 0.48621, 0.48188, 0.47647, 0.47136, 0.47008, 0.4698, 0.4711, 0.47446, 0.48319, 0.49417, 0.51548, 0.54759, 0.58598, 0.63583, 0.69085, 0.75041, 0.81152, 0.8701, 0.92229, 0.96216, 0.98978, 1.0, 0.99, 0.95956, 0.91045, 0.84336, 0.76039, 0.66951, 0.57379, 0.47757, 0.3851, 0.30167, 0.22484, 0.15907, 0.1079, 0.06705, 0.03974, 0.02067, 0.00872, 0.00269, 0.00085, 0.00058, ], [0.02908, 0.03689, 0.04566, 0.05484, 0.06458, 0.07504, 0.08691, 0.09832, 0.11145, 0.12594, 0.14361, 0.16343, 0.18486, 0.20801, 0.23321, 0.2597, 0.28561, 0.31253, 0.33846, 0.36276, 0.38456, 0.40398, 0.4199, 0.43242, 0.44141, 0.45111, 0.45796, 0.46392, 0.47288, 0.48663, 0.50592, 0.53411, 0.56922, 0.61444, 0.66699, 0.7232, 0.78467, 0.84326, 0.89824, 0.94502, 0.97972, 0.99916, 1.0, 0.98066, 0.94102, 0.88252, 0.80877, 0.72106, 0.62824, 0.53318, 0.43807, 0.3489, 0.26759, 0.19589, 0.13691, 0.08944, 0.05493, 0.03216, 0.01503, 0.00686, 0.00256, 0.00049, 5e-05, ], [0.13355, 0.18505, 0.24763, 0.31907, 0.39774, 0.48188, 0.5672, 0.65098, 0.72989, 0.80185, 0.86046, 0.90661, 0.93756, 0.95485, 0.95759, 0.94798, 0.92811, 0.89958, 0.8668, 0.8335, 0.80313, 0.77993, 0.76248, 0.75362, 0.75194, 0.75801, 0.77198, 0.79169, 0.81577, 0.84207, 0.86805, 0.89184, 0.91585, 0.93702, 0.95587, 0.97162, 0.9855, 0.9959, 1.0, 0.99791, 0.98816, 0.97093, 0.94562, 0.90968, 0.86475, 0.80927, 0.74418, 0.67138, 0.59186, 0.50904, 0.4268, 0.34754, 0.27459, 0.20953, 0.15343, 0.10623, 0.06906, 0.04057, 0.02043, 0.00749, 0.00171, 0.0001, 0.0, ], [0.04686, 0.07105, 0.10172, 0.13926, 0.18379, 0.23582, 0.29441, 0.35755, 0.42356, 0.49162, 0.55734, 0.62009, 0.67735, 0.72818, 0.77017, 0.8037, 0.82804, 0.84387, 0.85269, 0.85427, 0.85061, 0.84317, 0.83275, 0.82012, 0.80833, 0.7978, 0.78933, 0.78221, 0.77869, 0.77919, 0.78578, 0.79573, 0.81417, 0.83585, 0.86348, 0.8942, 0.92648, 0.95579, 0.97889, 0.99478, 1.0, 0.99311, 0.97182, 0.93487, 0.88226, 0.8157, 0.73726, 0.65059, 0.55942, 0.46846, 0.38043, 0.29948, 0.22652, 0.16517, 0.11335, 0.07398, 0.04344, 0.02197, 0.00867, 0.00195, 0.00044, 0.00018, 8e-05, ], [0.16557, 0.22229, 0.28877, 0.36345, 0.44486, 0.53202, 0.61874, 0.70378, 0.78268, 0.85254, 0.9102, 0.95571, 0.98569, 1.0, 0.99946, 0.98596, 0.96156, 0.92732, 0.88824, 0.84888, 0.8095, 0.77409, 0.74173, 0.71421, 0.69294, 0.67979, 0.67261, 0.6694, 0.67335, 0.68029, 0.69148, 0.70352, 0.71819, 0.73024, 0.74301, 0.75652, 0.76684, 0.77293, 0.77183, 0.76378, 0.74659, 0.72188, 0.68954, 0.64887, 0.60133, 0.54739, 0.48877, 0.42637, 0.36397, 0.30374, 0.24654, 0.19478, 0.14869, 0.11065, 0.07837, 0.05408, 0.03493, 0.01924, 0.00894, 0.00268, 0.00061, 4e-05, 0.0, ], [0.05173, 0.06915, 0.08928, 0.11232, 0.13799, 0.16765, 0.19799, 0.23144, 0.26389, 0.2956, 0.32503, 0.35429, 0.38139, 0.4086, 0.43267, 0.45519, 0.4777, 0.50022, 0.52515, 0.55509, 0.58527, 0.62003, 0.65721, 0.69958, 0.74354, 0.78656, 0.82953, 0.87038, 0.90945, 0.94225, 0.96973, 0.98745, 0.99918, 1.0, 0.99245, 0.97722, 0.95524, 0.92533, 0.88726, 0.84199, 0.78998, 0.73123, 0.67154, 0.60809, 0.54331, 0.4761, 0.41099, 0.34918, 0.2894, 0.23305, 0.18256, 0.13874, 0.10275, 0.07508, 0.05137, 0.0339, 0.0212, 0.01078, 0.00492, 0.00154, 0.00026, 1e-05, 0.0, ], [0.30975, 0.38515, 0.46746, 0.55344, 0.63807, 0.71813, 0.79228, 0.85603, 0.91085, 0.95278, 0.982, 0.99846, 1.0, 0.988, 0.96453, 0.92773, 0.88311, 0.83396, 0.78504, 0.73489, 0.68477, 0.63905, 0.59648, 0.55835, 0.52546, 0.49854, 0.47888, 0.46716, 0.46085, 0.45971, 0.46212, 0.47047, 0.48294, 0.50482, 0.53289, 0.56739, 0.60821, 0.65382, 0.6979, 0.73886, 0.77536, 0.8052, 0.82628, 0.83267, 0.82384, 0.79861, 0.75654, 0.69985, 0.63122, 0.55284, 0.47001, 0.38835, 0.30977, 0.23824, 0.17626, 0.12115, 0.07905, 0.0462, 0.02224, 0.00733, 0.00049, 3e-05, 0.0, ], [0.20931, 0.27469, 0.34866, 0.43088, 0.51921, 0.60772, 0.69315, 0.77496, 0.84827, 0.90861, 0.95569, 0.98605, 1.0, 0.99809, 0.98044, 0.94836, 0.90434, 0.85229, 0.79436, 0.73721, 0.68055, 0.6296, 0.5852, 0.54819, 0.51892, 0.49897, 0.48732, 0.48719, 0.49496, 0.50792, 0.52673, 0.55182, 0.57935, 0.61443, 0.64959, 0.6872, 0.72496, 0.7616, 0.79268, 0.81538, 0.83118, 0.83652, 0.83043, 0.81095, 0.77838, 0.73279, 0.67648, 0.60925, 0.53566, 0.45806, 0.38146, 0.30794, 0.24073, 0.18124, 0.13117, 0.08771, 0.05608, 0.03142, 0.01496, 0.00452, 0.00023, 1e-05, 0.0, ], [0.16005, 0.21252, 0.27476, 0.3455, 0.42416, 0.50689, 0.59072, 0.67327, 0.75159, 0.82327, 0.88468, 0.93507, 0.97114, 0.99338, 1.0, 0.99216, 0.97008, 0.93787, 0.89742, 0.85127, 0.80439, 0.75907, 0.71573, 0.67605, 0.64206, 0.61538, 0.5953, 0.58386, 0.5805, 0.58423, 0.59427, 0.60811, 0.62633, 0.64621, 0.66943, 0.69289, 0.71465, 0.73258, 0.74444, 0.74865, 0.74506, 0.73223, 0.70964, 0.67661, 0.63379, 0.58293, 0.52481, 0.46193, 0.39732, 0.33313, 0.27167, 0.21462, 0.1637, 0.12082, 0.08528, 0.05709, 0.03473, 0.01816, 0.008, 0.00198, 0.0001, 0.0, 0.0, ], [0.18966, 0.24445, 0.30601, 0.36979, 0.43571, 0.50153, 0.56706, 0.62758, 0.68125, 0.72762, 0.76742, 0.80269, 0.83227, 0.85852, 0.88186, 0.90324, 0.92084, 0.93593, 0.94976, 0.96345, 0.97713, 0.98948, 0.99745, 1.0, 0.99643, 0.99192, 0.98291, 0.97024, 0.95497, 0.94113, 0.93068, 0.92255, 0.91665, 0.91236, 0.91382, 0.91747, 0.92114, 0.92304, 0.92168, 0.91445, 0.89871, 0.87284, 0.8359, 0.7881, 0.73036, 0.66515, 0.59353, 0.516, 0.43772, 0.36187, 0.29019, 0.22543, 0.16828, 0.12083, 0.08282, 0.05362, 0.03084, 0.01509, 0.0062, 0.00148, 0.00013, 1e-05, 0.0, ], [0.02321, 0.03243, 0.04476, 0.05711, 0.07038, 0.08517, 0.10293, 0.12166, 0.14426, 0.17377, 0.20595, 0.24704, 0.29116, 0.33839, 0.39111, 0.45149, 0.51118, 0.57239, 0.63347, 0.68891, 0.7382, 0.77992, 0.81135, 0.832, 0.84163, 0.84733, 0.84592, 0.83983, 0.83412, 0.82962, 0.83272, 0.83794, 0.85707, 0.87607, 0.905, 0.93574, 0.96303, 0.98235, 0.99737, 1.0, 0.98649, 0.95831, 0.91261, 0.8508, 0.77519, 0.69045, 0.6002, 0.50634, 0.41655, 0.33298, 0.2558, 0.19083, 0.13302, 0.08912, 0.05274, 0.03053, 0.01446, 0.00628, 0.00233, 0.00083, 0.0003, 3e-05, 0.0, ], [0.17214, 0.22852, 0.29355, 0.36685, 0.44688, 0.53044, 0.61392, 0.69472, 0.77041, 0.83836, 0.89575, 0.94257, 0.97498, 0.99431, 1.0, 0.99402, 0.97674, 0.95215, 0.92472, 0.89692, 0.87034, 0.84695, 0.82722, 0.8111, 0.80109, 0.79654, 0.79647, 0.80076, 0.80711, 0.81381, 0.82008, 0.82299, 0.82207, 0.8157, 0.80654, 0.79387, 0.77735, 0.75617, 0.72903, 0.69636, 0.65953, 0.61883, 0.57547, 0.5293, 0.48155, 0.43277, 0.38282, 0.33249, 0.28328, 0.23618, 0.19313, 0.154, 0.11862, 0.08915, 0.06513, 0.04571, 0.03022, 0.01724, 0.00819, 0.00222, 0.00033, 1e-05, 0.0, ], [0.07791, 0.1121, 0.15045, 0.19511, 0.24512, 0.30258, 0.36537, 0.43095, 0.49729, 0.56608, 0.63035, 0.69308, 0.74809, 0.79809, 0.83737, 0.87128, 0.89491, 0.91001, 0.92049, 0.92609, 0.92584, 0.92326, 0.91639, 0.90518, 0.89826, 0.8925, 0.88952, 0.88683, 0.88935, 0.89533, 0.90601, 0.91503, 0.93121, 0.94484, 0.96244, 0.97893, 0.99373, 1.0, 0.99893, 0.98849, 0.96609, 0.93204, 0.88857, 0.83277, 0.76792, 0.69384, 0.61434, 0.53235, 0.45, 0.37088, 0.29555, 0.22921, 0.17135, 0.125, 0.08562, 0.05664, 0.03379, 0.01644, 0.00651, 0.00109, 0.00011, 1e-05, 0.0, ], [0.02964, 0.04027, 0.05332, 0.06822, 0.08538, 0.10549, 0.12839, 0.154, 0.18261, 0.21337, 0.24473, 0.28018, 0.31625, 0.35503, 0.39322, 0.43123, 0.47042, 0.50786, 0.54782, 0.58619, 0.62327, 0.66025, 0.69567, 0.73098, 0.76477, 0.79817, 0.8307, 0.86253, 0.89209, 0.92041, 0.94499, 0.96605, 0.98387, 0.99445, 1.0, 0.9983, 0.98988, 0.97236, 0.94496, 0.90899, 0.86173, 0.80824, 0.7482, 0.68159, 0.61147, 0.53839, 0.46573, 0.3945, 0.32648, 0.26279, 0.20641, 0.15673, 0.11565, 0.08235, 0.0559, 0.03553, 0.02096, 0.0104, 0.0043, 0.00139, 7e-05, 0.0, 0.0, ], [0.13016, 0.1724, 0.21679, 0.27012, 0.33407, 0.4075, 0.48243, 0.56544, 0.64825, 0.72567, 0.80108, 0.87168, 0.92886, 0.97117, 0.9955, 1.0, 0.9864, 0.95745, 0.92321, 0.88211, 0.83165, 0.77781, 0.72717, 0.67981, 0.64365, 0.61247, 0.58912, 0.57696, 0.57103, 0.56314, 0.55791, 0.55838, 0.55581, 0.55096, 0.54514, 0.5359, 0.52461, 0.50999, 0.48876, 0.46621, 0.43544, 0.40482, 0.37443, 0.34026, 0.30236, 0.26178, 0.22274, 0.18459, 0.14634, 0.10926, 0.08237, 0.06115, 0.04482, 0.02939, 0.017, 0.00791, 0.0041, 0.00258, 0.00165, 0.00089, 0.0004, 5e-05, 2e-05, ], [0.33824, 0.40364, 0.47188, 0.53109, 0.57999, 0.61721, 0.64462, 0.65905, 0.66309, 0.66004, 0.64743, 0.63043, 0.60934, 0.58591, 0.55937, 0.53135, 0.49407, 0.47423, 0.45896, 0.44135, 0.42395, 0.40788, 0.3858, 0.3653, 0.3452, 0.33272, 0.32332, 0.31653, 0.31073, 0.31168, 0.32358, 0.34727, 0.39121, 0.44011, 0.50361, 0.57011, 0.64702, 0.72755, 0.8059, 0.87587, 0.93439, 0.97694, 1.0, 0.99988, 0.97609, 0.92903, 0.85956, 0.77443, 0.67965, 0.58006, 0.48101, 0.38606, 0.29578, 0.21506, 0.14469, 0.09565, 0.0568, 0.03431, 0.01653, 0.00428, 0.00021, 2e-05, 1e-05, ], [0.26984, 0.33503, 0.40412, 0.47284, 0.53969, 0.5982, 0.64819, 0.68796, 0.71764, 0.73536, 0.74135, 0.73592, 0.72118, 0.69973, 0.67088, 0.6374, 0.59333, 0.55853, 0.52986, 0.50566, 0.48486, 0.46855, 0.45562, 0.449, 0.44648, 0.44985, 0.4564, 0.47093, 0.48656, 0.50709, 0.53198, 0.56433, 0.60025, 0.64655, 0.69586, 0.75121, 0.80923, 0.8644, 0.91339, 0.95521, 0.98505, 1.0, 0.99831, 0.97577, 0.93539, 0.87481, 0.79909, 0.71098, 0.61581, 0.5168, 0.42201, 0.33181, 0.25047, 0.17992, 0.12443, 0.07773, 0.0454, 0.02103, 0.00694, 0.00103, 0.00024, 2e-05, 0.0, ], [0.13293, 0.17433, 0.22433, 0.2771, 0.33188, 0.38707, 0.44678, 0.50132, 0.55345, 0.60359, 0.64753, 0.68361, 0.71041, 0.72883, 0.73642, 0.73747, 0.72406, 0.70397, 0.68117, 0.65202, 0.62005, 0.5885, 0.55226, 0.51634, 0.48405, 0.45962, 0.44267, 0.43494, 0.43346, 0.44653, 0.47146, 0.50514, 0.5521, 0.60745, 0.67274, 0.74128, 0.80938, 0.87055, 0.92542, 0.9675, 0.99328, 1.0, 0.98729, 0.95289, 0.9009, 0.83053, 0.74607, 0.65411, 0.55855, 0.4629, 0.37143, 0.28827, 0.2139, 0.15239, 0.10219, 0.06547, 0.03699, 0.01794, 0.00756, 0.00207, 0.00034, 1e-05, 0.0, ], [0.33875, 0.43021, 0.52048, 0.6147, 0.70278, 0.77814, 0.84192, 0.88721, 0.91526, 0.92884, 0.92209, 0.90217, 0.87184, 0.82898, 0.77927, 0.73141, 0.67246, 0.61014, 0.55925, 0.51485, 0.48053, 0.44741, 0.40731, 0.36775, 0.3422, 0.3192, 0.30062, 0.28748, 0.28061, 0.28574, 0.30547, 0.33652, 0.38607, 0.43864, 0.50728, 0.5903, 0.6731, 0.75304, 0.8319, 0.899, 0.95166, 0.98637, 1.0, 0.99068, 0.95874, 0.90494, 0.82986, 0.74107, 0.64765, 0.5525, 0.45566, 0.36283, 0.27529, 0.2, 0.13796, 0.09524, 0.05715, 0.02867, 0.01389, 0.0039, 0.00045, 2e-05, 1e-05, ], [0.06441, 0.09038, 0.11621, 0.14663, 0.17918, 0.21497, 0.25526, 0.29746, 0.33757, 0.38061, 0.42241, 0.46428, 0.50252, 0.53943, 0.5711, 0.60201, 0.62546, 0.64326, 0.6584, 0.67153, 0.67736, 0.68169, 0.67816, 0.67178, 0.67073, 0.66591, 0.66568, 0.6676, 0.67417, 0.68784, 0.71402, 0.73869, 0.77161, 0.80727, 0.85155, 0.8948, 0.93438, 0.96516, 0.98907, 1.0, 0.99653, 0.97699, 0.94462, 0.89498, 0.83285, 0.75812, 0.67485, 0.58958, 0.50076, 0.41464, 0.33263, 0.25872, 0.19249, 0.14166, 0.09861, 0.06537, 0.0372, 0.01807, 0.00813, 0.00208, 4e-05, 1e-05, 1e-05, ], [0.09594, 0.13398, 0.17972, 0.23446, 0.29167, 0.35345, 0.42151, 0.48963, 0.55813, 0.63453, 0.7041, 0.77154, 0.82935, 0.88022, 0.91875, 0.95068, 0.96882, 0.97776, 0.98338, 0.98079, 0.96978, 0.95409, 0.92808, 0.89748, 0.86955, 0.84405, 0.82374, 0.80949, 0.80026, 0.79919, 0.81218, 0.82301, 0.84586, 0.87207, 0.90423, 0.93689, 0.96718, 0.98647, 1.0, 0.99892, 0.98121, 0.94939, 0.90425, 0.84411, 0.77463, 0.69512, 0.60896, 0.52125, 0.438, 0.35745, 0.28304, 0.2185, 0.15798, 0.11224, 0.07721, 0.05041, 0.0309, 0.01576, 0.00742, 0.00249, 0.00028, 2e-05, 1e-05, ], [0.11217, 0.16052, 0.2124, 0.27132, 0.34982, 0.44106, 0.52534, 0.61244, 0.69893, 0.77732, 0.8435, 0.90264, 0.94774, 0.98005, 0.99694, 1.0, 0.98976, 0.96757, 0.93798, 0.90341, 0.86314, 0.82069, 0.77968, 0.7367, 0.69896, 0.66065, 0.61317, 0.56464, 0.53075, 0.49231, 0.45427, 0.42164, 0.39274, 0.36042, 0.33294, 0.30801, 0.28728, 0.27026, 0.25408, 0.2384, 0.22222, 0.20596, 0.1899, 0.17118, 0.15218, 0.13381, 0.11583, 0.09797, 0.08041, 0.06593, 0.05249, 0.04258, 0.03324, 0.02471, 0.01843, 0.0144, 0.01077, 0.0075, 0.00526, 0.00234, 0.00142, 0.00011, 2e-05, ], [0.07053, 0.09437, 0.12665, 0.1604, 0.19779, 0.24018, 0.29047, 0.34043, 0.39225, 0.44475, 0.49497, 0.54537, 0.59078, 0.63236, 0.66697, 0.6949, 0.71429, 0.72637, 0.73573, 0.7391, 0.7401, 0.73624, 0.7255, 0.7174, 0.70942, 0.70483, 0.70392, 0.71018, 0.72081, 0.74021, 0.76531, 0.79348, 0.82452, 0.85846, 0.89301, 0.92765, 0.9599, 0.98458, 0.99892, 1.0, 0.98517, 0.95663, 0.91503, 0.86335, 0.80094, 0.72811, 0.64753, 0.56629, 0.48327, 0.39909, 0.32007, 0.25101, 0.19068, 0.14125, 0.10189, 0.06796, 0.04372, 0.0239, 0.01074, 0.00265, 0.00024, 3e-05, 2e-05, ], [0.06706, 0.08316, 0.10274, 0.12151, 0.13993, 0.15853, 0.17777, 0.19398, 0.21027, 0.2283, 0.24342, 0.25715, 0.26974, 0.28383, 0.29679, 0.30796, 0.32086, 0.33713, 0.35928, 0.37788, 0.39964, 0.42021, 0.44002, 0.46317, 0.48608, 0.51137, 0.53886, 0.56785, 0.59409, 0.62487, 0.65512, 0.6848, 0.72057, 0.76232, 0.80745, 0.85142, 0.89744, 0.9394, 0.97003, 0.99163, 1.0, 0.99973, 0.98248, 0.95179, 0.90422, 0.83912, 0.7606, 0.67328, 0.57967, 0.48466, 0.39575, 0.3118, 0.2377, 0.17474, 0.122, 0.07821, 0.04535, 0.02318, 0.00825, 0.00111, 0.0001, 1e-05, 1e-05, ], [0.02734, 0.03483, 0.0449, 0.05322, 0.06281, 0.07161, 0.08301, 0.09288, 0.10413, 0.11957, 0.13401, 0.14877, 0.16352, 0.18324, 0.20266, 0.22828, 0.24905, 0.27019, 0.29423, 0.31428, 0.33134, 0.34712, 0.35676, 0.36411, 0.36833, 0.37209, 0.37054, 0.37045, 0.37253, 0.38103, 0.40324, 0.43234, 0.48123, 0.53413, 0.60088, 0.66807, 0.7438, 0.8145, 0.88325, 0.94074, 0.97933, 1.0, 0.99796, 0.97068, 0.92223, 0.85211, 0.76614, 0.67131, 0.574, 0.47569, 0.38047, 0.29454, 0.21415, 0.14961, 0.09528, 0.0617, 0.03436, 0.0188, 0.00713, 0.00129, 0.00013, 1e-05, 1e-05]];

	var samples = g3_envs[partial];
	var n_samples = samples.size();

	// create new envelope based on sampled information, kill the envelope when done
	// the array of amplitudes for a given partial are uniformly spaced, so we can use
	// a scalar value for the time to create an envelope that lasts a total of duration seconds.
	EnvGen.kr(Env(samples, times: duration/n_samples), doneAction: 2)
};

// synthesizes a violin-like sound with the given fundamental frequency in Hz
// the user can also specify the "shape" of the note by adjusting the parameters
// to an internally created linen envelope: attackTime, sustainTime, releaseTime, amp
// to synthesize a 3 second note, the sum of these times just needs to be 3
// the vibrato argument takes in a value from 0,1 to add no vibrato (0) or a lot of vibrato (1)
~noteGen = {|freq=196, attackTime=1.0, sustainTime=1.0, releaseTime=1.5, amp=1.0, vibrato=0.5, pan=0.0|
	// average amplitude for each partial given for the following two fundamental frequencies
	// for the ith partial, we will linearly interpolate between the i-th values in the
	// g3 and b3 partial amplitudes arrays
	var g3 = 196.0;
	var b3 = 246.94;
	// these values were provided
	var g3_p_amps = [-32.4.dbamp, -9.5.dbamp, -20.8.dbamp, -20.3.dbamp, -19.2.dbamp, -20.9.dbamp, -26.1.dbamp, -27.2.dbamp, -23.9.dbamp, -22.1.dbamp, -31.1.dbamp, -34.1.dbamp, -28.2.dbamp, -31.6.dbamp, -37.8.dbamp, -35.9.dbamp, -30.5.dbamp, -30.9.dbamp, -31.2.dbamp, -53.6.dbamp, -53.2.dbamp, -50.2.dbamp, -46.8.dbamp, -54.2.dbamp, -49.3.dbamp, -51.0.dbamp, -72.1.dbamp, -56.0.dbamp, -52.9.dbamp, -56.9.dbamp];
	// these values were obtained by exporting Audacity's fourier transform analysis of the string_vln.b3.wav file
	var b3_p_amps = [-19.677681.dbamp, -16.068069.dbamp, -24.365194.dbamp, -29.162367.dbamp, -22.563808.dbamp, -24.685932.dbamp, -23.103920.dbamp, -34.609348.dbamp, -39.673325.dbamp, -36.955822.dbamp, -43.593620.dbamp, -42.416943.dbamp, -44.805397.dbamp, -44.260376.dbamp, -53.416824.dbamp, -45.508774.dbamp, -49.013474.dbamp, -49.588352.dbamp, -58.833996.dbamp, -63.190372.dbamp, -60.234680.dbamp, -69.192421.dbamp, -60.320347.dbamp, -60.340473.dbamp, -66.070541.dbamp, -73.828949.dbamp, -73.772057.dbamp, -76.432671.dbamp, -78.956154.dbamp, -77.941963.dbamp];
	var num_partials = g3_p_amps.size;

	// create the overall envelope specified by the user to create the "shape" of the note
	var overall_env = Env.linen(attackTime, sustainTime, releaseTime, amp, \welch).kr();
	var duration = attackTime + sustainTime + releaseTime;

	// create an array of num_partials SinOscs, with the i-th index corresponding
	// to the (i+1)-th partial
	var violin = Array.fill(num_partials, {|i|
		// interpolate between the g3 and b3 partial amplitudes
		// using a similar method as mapValues on hw2 clipping interpolated
		// values for frequencies not between g3 and b3
		var g3_p_a = g3_p_amps[i], b3_p_a = b3_p_amps[i];
		var inLo = g3, inHi = b3, outLo = g3_p_a.min(b3_p_a), outHi = g3_p_a.max(b3_p_a);
		var interp_p_amp = ((freq-inLo)/(inHi-inLo)*(outHi-outLo)+outLo).clip(outLo, outHi);
		p = i+1;
		SinOsc.ar(
			freq: p*freq + // this is the true frequency of the partial
			    (LFNoise1.kr(3, mul:1.5) + // add +/- 1.5Hz of frequency noise 3 times/second
			    // add vibrato scaled by vibrato argument, wrap in the same envelope as the partial
			    // to make sure the vibrato is strongest when the partial is loudest
			    SinOsc.kr(5, mul:0.03*freq*vibrato) * ~getEnv.(i, duration)) +
			    // add some pinknoise to frequency to simulate bow noise
			    PinkNoise.kr(mul: 10),

			mul: ( ~getEnv.(i, duration) * // multiply everything by STFT-calculated, per-partial envelope
				( interp_p_amp + // use the interpolated average amplitude
			      LFNoise1.kr(5, mul:0.002) + // add some noise
				  PinkNoise.kr(mul: 0.03) )) // pink noise to simulate bow noise
		)
	});

	Out.ar(0, // output to the first bus
		overall_env * Pan2.ar( // pan and wrap in overall envelope
			Mix.ar(violin), // combine the array of partials into one audio stream
			pos:pan // pan according to user-supplied argument
		)
	)
};

// play a single note
~noteGen.play(args: [\freq: 247, \vibrato: 0.5]);
)


// This code block defines a function for playing melodies using the noteGen function above
// currently the only song is Ode to Joy, which doesn't sound great at its original bpm (144),
// since it consists of quick bouncy notes, and our syntehsized violin was generated by a longer
// segment
(
var a4 = 440;
var base = 2**(1/12);
var octave_down = 1;
var g3 = a4 * (base ** (-14 + (octave_down*(-12))));
var c4 = a4 * (base ** (-9 + (octave_down*(-12))));
var d4 = a4 * (base ** (-7 + (octave_down*(-12))));
var e4 = a4 * (base ** (-5 + (octave_down*(-12))));
var f4 = a4 * (base ** (-4 + (octave_down*(-12))));
var g4 = a4 * (base ** (-2 + (octave_down*(-12))));

var odeToJoy = [
	[e4, 1], [e4, 1], [f4, 1], [g4, 1], // measure 1
	[g4, 1], [f4, 1], [e4, 1], [d4, 1], // 2
	[c4, 1], [c4, 1], [d4, 1], [e4, 1], // 3
	[e4, 1.5], [d4, 0.5], [d4, 2], // 4

	[e4, 1], [e4, 1], [f4, 1], [g4, 1], // 5
	[g4, 1], [f4, 1], [e4, 1], [d4, 1], // 6
	[c4, 1], [c4, 1], [d4, 1], [e4, 1], // 7
	[d4, 1.5], [c4, 0.5], [c4, 2], // 8

	[d4, 1], [d4, 1], [e4, 1], [c4, 1], // 9
	[d4, 1], [e4, 0.5], [f4, 0.5], [e4, 1], [c4, 1], // 10
	[d4, 1], [e4, 0.5], [f4, 0.5], [e4, 1], [d4, 1], // 11
	[c4, 1], [d4, 1], [g3, 2], // 12

	[e4, 1], [e4, 1], [f4, 1], [g4, 1], // 13
	[g4, 1], [f4, 1], [e4, 1], [d4, 1], // 14
	[c4, 1], [c4, 1], [d4, 1], [e4, 1], // 15
	[d4, 1.5], [c4, 0.5], [c4, 2], // 16
];

// playSong takes in a melody (an array of [freq (Hz), duration (relative to quarter note)] pairs)
// along with the bpm at which to play it at. Currently, one cannot specify rests, so extending the previous note
// is the only option
~playSong = {|melody, bpm|
	var running_time = 0.0;
	melody.do({ arg item;
		var note = item[0];
		var duration = item[1] * 60.0 / bpm;
		// may have to fiddle with these parameters to get the violin to sound decent,
		// especially since they are likely bpm dependent
		var aT = duration * 0.2;
		var sT = duration * 0.5;
		var rT = duration * 0.3;
		// use a scheduler based on system clock to make sure notes don't overlap
		SystemClock.sched(running_time, {
			~noteGen.play(args: [\freq, note, \attackTime, aT, \sustainTime, sT, \releaseTime, rT, \vibrato, 0.5, \pan, 0.0]);
		});
		running_time = running_time + item[1];
	})
};

// view the frequency spectra of the synthesized violin notes
// FreqScope.new;
~playSong.(odeToJoy, 60);
)

s.prepareForRecord;

s.record;

s.stopRecording;